global
    daemon
    group  haproxy
    log  /dev/log local0
    maxconn  20480
    pidfile  /var/run/haproxy.pid
    user  haproxy

###########################
defaults
    log  global
    maxconn  4096
    mode  tcp
    retries  3
    timeout  http-request {{webapp_request_timeout}}s
    timeout  queue {{webapp_request_timeout}}s
    timeout  connect  {{webapp_request_timeout}}s
    timeout  client  {{webapp_request_timeout}}s
    timeout  server  {{webapp_request_timeout}}s
    timeout  check  {{webapp_request_timeout}}s

###########################
listen haproxy.stats
    bind {{ lb.external_bind_address }}:1993
    {% if lb.external_bind_address != lb.internal_bind_address and lb.internal_bind_address != '' %}
    bind {{ lb.internal_bind_address }}:1993
    {% endif %}

    mode http
    stats enable
    stats uri /

###########################
listen web
    bind {{ lb.external_loadbalanced_ip }}:80 transparent
    {% if lb.external_loadbalanced_ip != lb.internal_loadbalanced_ip and lb.internal_loadbalanced_ip != '' %}
    bind {{ lb.internal_loadbalanced_ip }}:80 transparent
    {% endif %}
    mode http
    cookie SERVERID insert indirect nocache
    {% for node in groups['cluster'] %}
    server {{ hostvars[node]["ansible_hostname"] }} {{ hostvars[node][lb.internal_eth_name]["ipv4"]["address"] }}:{{nginx_listen_port}} check cookie {{ hostvars[node]["ansible_hostname"] }} fall 5 inter 2000 rise 2
    {% endfor %}


###########################
{% if cluster_db_loadbalancer == 'haproxy' %}
###########################

###########################
listen mysql
    bind {{ lb.internal_loadbalanced_ip }}:3306 transparent
    {% if lb.external_loadbalanced_ip != lb.internal_loadbalanced_ip and lb.internal_loadbalanced_ip != '' %}
    bind {{ lb.internal_loadbalanced_ip }}:3306 transparent
    {% endif %}
    log global
    mode tcp
    option tcpka
    balance leastconn
    option tcplog
    option persist
    option redispatch
    option httpchk
    option allbackups
#    stick on dst
#    stick-table type ip size 1000
    timeout client {{mysql_config_wait_timeout}}s
    timeout server {{mysql_config_wait_timeout}}s
    #    https://groups.google.com/forum/#!topic/codership-team/85yhYGckb6M
    default-server port 9200 inter 2s downinter 5s rise 3 fall 2 slowstart 60s maxconn 64 maxqueue 128 weight 100
    {% for node in groups['cluster'] %}
    server {{ hostvars[node]["ansible_hostname"] }} {{ hostvars[node][lb.internal_eth_name]["ipv4"]["address"] }}:{{db.mysql_listen_port}} check {% if not loop.first %} # backup {% endif %}

   {% endfor %}

###########################

###########################
# http://severalnines.com/blog/avoiding-deadlocks-galera-set-haproxy-single-node-writes-and-multi-node-reads
###
listen mysql_readonly
    bind {{ lb.internal_loadbalanced_ip }}:3307 transparent
    {% if lb.external_loadbalanced_ip != lb.internal_loadbalanced_ip and lb.internal_loadbalanced_ip != '' %}
    bind {{ lb.internal_loadbalanced_ip }}:3307 transparent
    {% endif %}
    log global
    mode tcp
    option tcpka
    balance leastconn
    option tcplog
    option persist
    option redispatch
    option httpchk
    option allbackups
#    stick on dst
#    stick-table type ip size 1000
    timeout client {{mysql_config_wait_timeout}}s
    timeout server {{mysql_config_wait_timeout}}s
    #    https://groups.google.com/forum/#!topic/codership-team/85yhYGckb6M
    default-server port 9200 inter 2s downinter 5s rise 3 fall 2 slowstart 60s maxconn 64 maxqueue 128 weight 100
    {% for node in groups['cluster'] %}
    server {{ hostvars[node]["ansible_hostname"] }} {{ hostvars[node][lb.internal_eth_name]["ipv4"]["address"] }}:{{db.mysql_listen_port}} check

   {% endfor %}

###########################
{% endif %}
###########################

# from: http://blog.haproxy.com/2014/01/02/haproxy-advanced-redis-health-check/
defaults REDIS
    mode tcp
    timeout connect  3s
    timeout server  6s
    timeout client  6s


frontend ft_redis
    bind {{ lb.external_loadbalanced_ip }}:6379 name redis
    {% if lb.external_loadbalanced_ip != lb.internal_loadbalanced_ip and lb.internal_loadbalanced_ip != '' %}
    bind {{ lb.internal_loadbalanced_ip }}:6379 name redis
    {% endif %}
    default_backend bk_redis


backend bk_redis
    mode tcp
    option tcplog
    option tcp-check
    {% if redis_auth_password != '' %}
    tcp-check send AUTH\ {{ redis_auth_password }}\r\n
    tcp-check expect string  +OK
    {% endif %}
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send info\ replication\r\n
    tcp-check expect string role:master
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    {% for node in groups['cluster'] %}
    server {{ hostvars[node]["ansible_hostname"] }} {{ hostvars[node][lb.internal_eth_name]["ipv4"]["address"] }}:{{redis_listen_port}} check inter 1s
    {% endfor %}
