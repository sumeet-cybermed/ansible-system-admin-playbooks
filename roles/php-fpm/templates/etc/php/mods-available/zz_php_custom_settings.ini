;;append at end

;sumeet
[PHP]

;
;https://nealpoole.com/blog/2011/04/setting-up-php-fastcgi-and-nginx-dont-trust-the-tutorials-check-your-configuration/
;Set cgi.fix_pathinfo to false in php.ini (itâ€™s set to true by default). This change appears to break any software that relies on PATH_INFO being set properly (eg: Wordpress).
cgi.fix_pathinfo=0

;
max_input_time = {{webapp_max_input_time}}
max_execution_time = {{webapp_request_timeout}}

;
memory_limit = 512M
upload_max_filesize=16M
post_max_size=16M

;
error_reporting = E_ALL & ~E_NOTICE & ~E_DEPRECATED & ~E_STRICT & ~E_WARNING

;sumeet - important elsze code fails on linux!
short_open_tag=On
;
display_errors = On
display_startup_errors = On
log_errors = On
error_log = {{php_error_log}}
date.timezone="Asia/Kuala_Lumpur"

default_encoding = "utf-8"

;;for zabbix
always_populate_raw_post_data="-1"

[xcache]
xcache.size  =   128M ;Total amount of memory used for opcode (*.php) caching. 
xcache.var_size = 0 ;we use redis for caching - this keeps php process size low
xcache.optimizer = Off ; dont use optimizer
xcache.coverager = Off

[xcache.admin]
xcache.admin.enable_auth = On
; Configure this to use admin pages
xcache.admin.user = "devuser"
; xcache.admin.pass = md5($your_password)
xcache.admin.pass = "e0f00f9a1fecad849b936627458911cc  -"

[apc]
apc.shm_size="128"
apc.enable_cli=1

[opcache]
;http://php.net/manual/en/opcache.configuration.php#ini.opcache.consistency-checks
;https://tideways.io/profiler/blog/fine-tune-your-opcache-configuration-to-avoid-caching-suprises
; zend_extension = "php_opcache.dll"
; opcache.file_cache = "C:\temp\opcache\php7_x86"
opcache.file_cache={{opcache_file_cache_path}}
opcache.enable_cli = 1
opcache.enable = 1
opcache.fast_shutdown = 0
opcache.file_cache_consistency_checks = 1 
opcache.force_restart_timeout = 600
opcache.interned_strings_buffer = 4
opcache.max_file_size = 1M
opcache.revalidate_path = 1
opcache.max_file_size = 100000 ;The maximum file size that will be cached, in bytes. If this is 0, all files will be cached.
opcache.error_log = "" ;The error log for OPcache errors. An empty string is treated the same as stderr, and will result in logs being sent to standard error (which will be the Web server error log in most cases).
opcache.file_cache_consistency_checks = 0 ;Enables or disables checksum validation when script loaded from file cache.
opcache.dups_fix = 0 ;This hack should only be enabled to work around "Cannot redeclare class" errors.
opcache.blacklist_filename = "" ;The location of the OPcache blacklist file. A blacklist file is a text file containing the names of files that should not be accelerated, one per line. Wildcards are allowed, and prefixes can also be provided. Lines starting with a semi-colon are ignored as comments. 
opcache.save_comments = 0
opcache.use_cwd = 1 ;append current dir to script key

;;
opcache.memory_consumption = 256 ; MB, adjust to your needs
opcache.max_accelerated_files = 10000 ; Adjust to your needs
opcache.max_wasted_percentage = 10 ; Adjust to your needs

;;for production
opcache.validate_timestamps = 0
opcache.revalidate_freq = 60
opcache.consistency_checks = 0
opcache.file_cache_consistency_checks = 0 ;Enables or disables checksum validation when script loaded from file cache.

; ;;for dev
; opcache.validate_timestamps = 1
; opcache.revalidate_freq = 15
; opcache.consistency_checks = 0
; opcache.file_cache_consistency_checks = 0 ;Enables or disables checksum validation when script loaded from file cache.

[session]
; session.save_handler = memcached
; session.save_path = "localhost:11211"
session.save_handler = redis
session.save_path = "{{php_session_save_path_redis}}"

[XDebug]

;This switch controls whether Xdebug should try to contact a debug client which is listening on the host and port as set with the settings xdebug.remote_host and xdebug.remote_port. If a connection can not be established the script will just continue as if this setting was 0.
xdebug.remote_enable=true

;If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the HTTP request. It checks the $_SERVER['REMOTE_ADDR'] variable to find out which IP address to use. Please note that there is no filter available, and anybody who can connect to the webserver will then be able to start a debugging session, even if their address does not match xdebug.remote_host.
xdebug.remote_connect_back=off

;Selects the host where the debug client is running, you can either use a host name or an IP address. This setting is ignored if xdebug.remote_connect_back is enabled.
;;; use ssh client to map port: ssh -p 22 -R 9001:localhost:9001  root@xxxx
xdebug.remote_host=127.0.0.1
;,192.168.*.*,10.*.*.*,192.150.*.*,192.153.*.*

;Can be either 'php3' which selects the old PHP 3 style debugger output, 'gdb' which enables the GDB like debugger interface or 'dbgp' - the debugger protocol. The DBGp protocol is the only supported protocol.
xdebug.remote_handler=dbgp

;The port to which Xdebug tries to connect on the remote host. Port 9000 is the default for both the client and the bundled debugclient. As many clients use this port number, it is best to leave this setting unchanged.
xdebug.remote_port=9001

;Controls which IDE Key Xdebug should pass on to the DBGp debugger handler. The default is based on environment settings. First the environment setting DBGP_IDEKEY is consulted, then USER and as last USERNAME. The default is set to the first environment variable that is found. If none could be found the setting has as default ''. If this setting is set, it always overrides the environment variables.
xdebug.idekey=www-data

; If set to a value, it is used as filename to a file to which all remote debugger communications are logged. The file is always opened in append-mode, and will therefore not be overwritten by default. There is no concurrency protection available. The format of the file looks something like: 
xdebug.remote_log=/var/log/nginx/xdebug.log


;Controls whether Xdebug should enforce 'extended_info' mode for the PHP parser; this allows Xdebug to do file/line breakpoints with the remote debugger. When tracing or profiling scripts you generally want to turn off this option as PHP's generated oparrays will increase with about a third of the size slowing down your scripts. This setting can not be set in your scripts with ini_set(), but only in php.ini.
xdebug.extended_info=1

;Selects when a debug connection is initiated. This setting can have two different values:
;req     Xdebug will try to connect to the debug client as soon as the script starts.
;jit     Xdebug will only try to connect to the debug client as soon as an error condition occurs.
xdebug.remote_mode=req

;Normally you need to use a specific HTTP GET/POST variable to start remote debugging (see Remote Debugging). When this setting is set to 1, Xdebug will always attempt to start a remote debugging session and try to connect to a client, even if the GET/POST/COOKIE variable was not present.
xdebug.remote_autostart=0

;;profiler
xdebug.profiler_enable=0
xdebug.profiler_enable_trigger=1
;xdebug.profiler_output_dir=C:\Windows\Temp
;xdebug.profiler_output_dir=/tmp
xdebug.profiler_output_name=cachegrind.out.%p-%H-%R

;;
xdebug.show_exception_trace=1
xdebug.auto_trace=0

;;
;If this setting is 1, Xdebug will color var_dumps and stack traces output when in CLI mode and when the output is a tty. On Windows, the ANSICON tool needs to be installed.
xdebug.cli_color=1

;;http://xdebug.org/docs/display
;By default Xdebug overloads var_dump() with its own improved version for displaying variables when the html_errors php.ini setting is set to 1. In case you do not want that, you can set this setting to 0, but check first if it's not smarter to turn off html_errors.
;You can also use 2 as value for this setting. Besides formatting the var_dump() output nicely, it will also add filename and line number to the output. 
xdebug.overload_var_dump = 2;
xdebug.var_display_max_children = 24
xdebug.var_display_max_data = 128
xdebug.var_display_max_depth = 1

;;
xdebug.file_link_format=vim://%f@%l

; If this setting is 1, then stacktraces will be shown by default on an error event. You can disable showing stacktraces from your code with xdebug_disable(). As this is one of the basic functions of Xdebug, it is advisable to leave this setting set to 1.
xdebug.default_enable=1

; If this setting is set to 1 then errors will always be displayed, no matter what the setting of PHP's display_errors is.
xdebug.force_display_errors=0

; This setting is a bitmask, like error_reporting. This bitmask will be logically ORed with the bitmask represented by error_reporting to dermine which errors should be displayed. This setting can only be made in php.ini and allows you to force certain errors from being shown no matter what an application does with ini_set().
xdebug.force_error_reporting=0

; Controls the protection mechanism for infinite recursion protection. The value of this setting is the maximum level of nested functions that are allowed before the script will be aborted.
xdebug.max_nesting_level=100

; If this setting is 1, then Xdebug will disable the @ (shut-up) operator so that notices, warnings and errors are no longer hidden.
xdebug.scream=0

; Controls whether the values of the superglobals as defined by the xdebug.dump.* settings should be shown or not.
xdebug.dump_globals=0

;Controls whether the values of the superglobals should be dumped on all error situations (set to 0) or only on the first (set to 1).
xdebug.dump_once=1


;
xdebug.remote_cookie_expire_time=7200


[mysql]
mysql.connect_timeout = 60
mysql.allow_persistent = On

;;; start: for high security : http://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html
; Disallow dangerous functions
; disable_functions = phpinfo, system, mail, exec
 
; ## Try to limit resources  ##
 
; # Maximum execution time of each script, in seconds
; max_execution_time = 30
 
; # Maximum amount of time each script may spend parsing request data
; max_input_time = 60
 
; # Maximum amount of memory a script may consume (8MB)
; memory_limit = 8M
 
; # Maximum size of POST data that PHP will accept.
; post_max_size = 8M
 
; # Whether to allow HTTP file uploads.
; file_uploads = Off
 
; # Maximum allowed size for uploaded files.
; upload_max_filesize = 2M
 
; # Do not expose PHP error messages to external users
; display_errors = Off
 
; # Turn on safe mode
; safe_mode = On
 
; # Only allow access to executables in isolated directory
; safe_mode_exec_dir = php-required-executables-path
 
; # Limit external access to PHP environment
; safe_mode_allowed_env_vars = PHP_
 
; # Restrict PHP information leakage
; expose_php = Off
 
; # Log all errors
; log_errors = On
 
; # Do not register globals for input data
; register_globals = Off
 
; # Minimize allowable PHP post size
; post_max_size = 1K
 
; # Ensure PHP redirects appropriately
; cgi.force_redirect = 0
 
; # Disallow uploading unless necessary
; file_uploads = Off
 
; # Enable SQL safe mode
; sql.safe_mode = On
 
; # Avoid Opening remote files
; allow_url_fopen = Off
;;; END: for high security : 

[sqlsrv]
sqlsrv.LogSubsystems = SQLSRV_LOG_SYSTEM_ALL
;SQLSRV_LOG_SYSTEM_OFF
sqlsrv.LogSeverity = SQLSRV_LOG_SEVERITY_ALL
;SQLSRV_LOG_SEVERITY_ERROR
sqlsrv.WarningsReturnAsErrors = 0