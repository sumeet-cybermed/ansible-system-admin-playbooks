#page speed
#causes issues with images esp in email UI top button
pagespeed Off;


# Previous versions of PageSpeed would rewrite relative URLs into absolute URLs. This wastes bytes and can cause problems for sites that sit behind HTTPS terminators.
# With PreserveUrlRelativity on, PageSpeed will keep URLs the way they were found. Some examples: 
pagespeed PreserveUrlRelativity on;

# # By respecting Cache-Control: no-transform headers, PageSpeed cannot optimize resources that could otherwise be rewritten.
# # To optimize resources irrespective of Cache-Control: no-transform headers, you must add
pagespeed DisableRewriteOnNoTransform off;

# # If PageSpeed lowercases keywords in XML pages, it can break the consumers of such pages, such as Flash. To be conservative and avoid breaking such pages, PageSpeed does not lowercase HTML element and attribute names by default. However, you can sometimes achieve a modest improvement in the size of compressed HTML by enabling this feature with:
# pagespeed LowercaseHtmlNames on;


# # By default, PageSpeed serves all HTML with Cache-Control: no-cache, max-age=0 because the transformations made to the page may not be cacheable for extended periods of time.
# # If you want to force PageSpeed to leave the original HTML caching headers you can add:
# pagespeed ModifyCachingHeaders off;

# # By default, PageSpeed adds an header, X-Mod-Pagespeed in Apache, X-Page-Speed in Nginx, with the version of PageSpeed being used. 
# pagespeed XHeaderValue "Powered By ngx_pagespeed";

##special locations    
location ~ ^/pagespeed_admin {allow 127.0.0.1;  allow all;}
location ~ "^/pagespeed_static/" { }
location ~ "^/ngx_pagespeed_beacon$" { }
location /ngx_pagespeed_statistics { allow 127.0.0.1; allow all; }
location /ngx_pagespeed_global_statistics { allow 127.0.0.1; allow all; }
location /ngx_pagespeed_message { allow 127.0.0.1; allow all; }
location /pagespeed_console { allow 127.0.0.1; allow all; }
location /pagespeed_admin { allow 127.0.0.1; allow all; }

# Ensure requests for pagespeed optimized resources go to the pagespeed handler
# and no extraneous headers get set.
location ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+" {
    add_header "" "";
}

pagespeed Domain *.$host;

# PageSpeed offers three "levels" to simplify configuration: PassThrough, CoreFilters, and OptimizeForBandwidth. The CoreFilters set contains filters that the PageSpeed team believes are safe for most web sites. By using the CoreFilters set, as PageSpeed is updated with new filters, your site will get faster. The OptimizeForBandwidth setting provides a stronger guarantee of safety and is suitable as a default setting for use with sites that are not aware of PageSpeed. 

# pagespeed RewriteLevel CoreFilters;

#EXTRA NON-DEFAULT PAGE SPEED CONFIG
pagespeed EnableFilters combine_css,move_css_above_scripts,defer_javascript,lazyload_images;
pagespeed EnableFilters rewrite_images;
pagespeed EnableFilters prioritize_critical_css;
pagespeed EnableFilters rewrite_javascript;
pagespeed UseExperimentalJsMinifier on;
pagespeed EnableFilters inline_google_font_css;
pagespeed EnableFilters insert_dns_prefetch;
pagespeed EnableFilters combine_javascript;
    
# The 'Add Instrumentation' filter injects two small blocks of JavaScript into every HTML page. These blocks measure the time the client spends loading and rendering the page, and report that measurement back to the server  
pagespeed EnableFilters add_instrumentation;  
